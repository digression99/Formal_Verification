-- second draft
-- now, test the code and add the exception handling.
-- in equality, only use = not =

MODULE processor(bus_signal, selector_signal, id)
VAR
    cache_state : {invalid, modified, shared};
    cpu_action : {idle, load, store, pending, locked};
    saved_state : {none, idle, load, store};
ASSIGN
    init(cache_state) := invalid;
    init(cpu_action) := idle;
    init(saved_state) := none;

    next(saved_state) := case
        cpu_action = locked | cpu_action = pending : saved_state;
        cpu_action = load | cpu_action = store : cpu_action;
        cpu_action = idle : none;
            esac;

    next(cpu_action) := case
        -- choose the next state by the bus action and selector signal first.
        -- then consider saved state.

        bus_signal = NONE & selector_signal = 0 : case
            -- for the initial state;
            cpu_action = idle : {load, store};
            cpu_action = load | cpu_action = store : pending;
            TRUE : cpu_action;
                esac;
        bus_signal = NONE & selector_signal != 0 : case
            selector_signal = id & cpu_action = pending : cpu_action;
            selector_signal != id & cpu_action = pending : locked;
            selector_signal != id & cpu_action = idle : locked;
            
            -- selector_signal = id & cpu_action = idle : error;
            TRUE : cpu_action;
                esac;
        bus_signal != NONE & selector_signal != 0 : case
            (cpu_action = pending | cpu_action = locked) & saved_state != none : saved_state;
            (cpu_action = pending | cpu_action = locked) & saved_state = none : {idle, load, store};
            TRUE : cpu_action;
                esac;
        TRUE : cpu_action;

        -- if something happens, then bus_signal is not none and selector signal is not 0.
        -- selector_signal = id & cpu_action = idle -> error;
            esac;

    next(cache_state) := case
        bus_signal = NONE | bus_signal = STAY : cache_state;
        selector_signal = id : case
            bus_signal = GETS & cache_state = invalid : shared;
            bus_signal = GETS & (cache_state = shared | cache_state = modified) : cache_state;

            bus_signal = GETX & cache_state = invalid : modified;
            bus_signal = GETX & cache_state = modified : cache_state;

            bus_signal = UPGRADE  & cache_state = shared : modified;

            bus_signal = SOURCE & (cache_state = invalid | cache_state = shared) : modified;

            -- bus_signal = SOURCE & cache_state = modified : error;
            -- bus_signal = UPGRADE & cache_state = modified : error;
            -- bus_signal = UPGRADE & cache_state = invalid : error;
            -- bus_signal = GETX & cache_state = shared : error;
            TRUE : cache_state;
                esac;
        selector_signal != id : case
            bus_signal = GETS & (cache_state = invalid | cache_state = shared) : cache_state;
            bus_signal = GETS & cache_state = modified : shared;

            (bus_signal = GETX | bus_signal = UPGRADE | bus_signal = SOURCE) & (cache_state = modified | cache_state = shared) : invalid;

            bus_signal = GETX & cache_state = invalid : cache_state;
            bus_signal = UPGRADE & cache_state = invalid : cache_state;
            bus_signal = SOURCE & cache_state = invalid : cache_state;

            -- bus_signal = GETX & (cache_state = shared | cache_state = modified) : invalid;
            -- bus_signal = UPGRADE & (cache_state = modified | cache_state = shared : invalid;
            -- bus_signal = SOURCE  & (cache_state = modified | cache_state = shared) : invalid;
            TRUE : cache_state;
                esac;
        TRUE : cache_state;
            esac;

MODULE main
VAR
    selector                : {0, 1, 2, 3};
    bus_action              : {NONE, GETS, GETX, SOURCE, UPGRADE, STAY};
    cpu1 : processor(bus_action, selector, 1);
    cpu2 : processor(bus_action, selector, 2);
    cpu3 : processor(bus_action, selector, 3);
ASSIGN
    init(selector) := 0;
    init(bus_action) := NONE;

    next(selector) := case
        selector != 0 : case
            bus_action != NONE : 0;
            bus_action = NONE : selector;
                esac;
        selector = 0 : case
            cpu1.cpu_action != idle & (cpu2.cpu_action = idle & cpu3.cpu_action = idle) : 1;
            cpu2.cpu_action != idle & (cpu1.cpu_action = idle & cpu3.cpu_action = idle) : 2;
            cpu3.cpu_action != idle & (cpu1.cpu_action = idle & cpu2.cpu_action = idle) : 3;

            cpu1.cpu_action != idle & cpu2.cpu_action != idle & cpu3.cpu_action = idle : {1, 2};
            cpu1.cpu_action != idle & cpu3.cpu_action != idle & cpu2.cpu_action = idle : {1, 3};
            cpu2.cpu_action != idle & cpu3.cpu_action != idle & cpu1.cpu_action = idle : {2, 3};

            cpu1.cpu_action != idle & cpu2.cpu_action != idle & cpu3.cpu_action != idle : {1, 2, 3};
            TRUE : selector;
                esac;
        TRUE : selector;
            esac;
    next(bus_action) := case
        selector = 0 : bus_action;
        -- bus_action should be just one clock.
        bus_action != NONE : NONE;

        selector = 1 : case
            cpu1.saved_state = load : case
                cpu1.cache_state = invalid & (cpu2.cache_state = invalid | cpu2.cache_state = shared) & (cpu3.cache_state = invalid | cpu3.cache_state = shared) : GETS;
                cpu1.cache_state = invalid & (cpu2.cache_state = modified | cpu3.cache_state = modified) : SOURCE;

                -- if cpu1.cache_state is shared, then load means nothing.
                -- this implies the bus action to be the stay state.
                cpu1.cache_state = shared : STAY;
                cpu1.cache_state = modified : STAY;
                TRUE : bus_action;
                    esac;
            cpu1.saved_state = store : case
                cpu1.cache_state = invalid & (cpu2.cache_state = invalid | cpu2.cache_state = shared) & (cpu3.cache_state = invalid | cpu3.cache_state = shared) : GETX;
                cpu1.cache_state = invalid & (cpu2.cache_state = modified | cpu3.cache_state = modified) : SOURCE;
                cpu1.cache_state = shared : UPGRADE;
                cpu1.cache_state = modified : STAY;
                TRUE : bus_action;
                    esac;
            TRUE : bus_action;
                esac;
        selector = 2 : case
            cpu2.saved_state = load : case
                cpu2.cache_state = invalid & (cpu1.cache_state = invalid | cpu1.cache_state = shared) & (cpu3.cache_state = invalid | cpu3.cache_state = shared) : GETS;
                cpu2.cache_state = invalid & (cpu1.cache_state = modified | cpu3.cache_state = modified) : SOURCE;

                -- if cpu1.cache_state is shared, then load means nothing.
                -- this implies the bus action to be the stay state.
                cpu2.cache_state = shared : STAY;
                cpu2.cache_state = modified : STAY;
                TRUE : bus_action;
                    esac;
            cpu2.saved_state = store : case
                cpu2.cache_state = invalid & (cpu1.cache_state = invalid | cpu1.cache_state = shared) & (cpu3.cache_state = invalid | cpu3.cache_state = shared) : GETX;
                cpu2.cache_state = invalid & (cpu1.cache_state = modified | cpu3.cache_state = modified) : SOURCE;
                cpu2.cache_state = shared : UPGRADE;
                cpu2.cache_state = modified : STAY;
                TRUE : bus_action;
                    esac;
            TRUE : bus_action;
                esac;
        selector = 3 : case
            cpu3.saved_state = load : case
                cpu3.cache_state = invalid & (cpu1.cache_state = invalid | cpu1.cache_state = shared) & (cpu2.cache_state = invalid | cpu2.cache_state = shared) : GETS;
                cpu3.cache_state = invalid & (cpu1.cache_state = modified | cpu2.cache_state = modified) : SOURCE;
                -- if cpu1.cache_state is shared, then load means nothing.
                -- this implies the bus action to be the stay state.
                cpu3.cache_state = shared : STAY;
                cpu3.cache_state = modified : STAY;
                TRUE : bus_action;
                    esac;
            cpu3.saved_state = store : case
                cpu3.cache_state = invalid & (cpu1.cache_state = invalid | cpu1.cache_state = shared) & (cpu2.cache_state = invalid | cpu2.cache_state = shared) : GETX;
                cpu3.cache_state = invalid & (cpu1.cache_state = modified | cpu2.cache_state = modified) : SOURCE;
                cpu3.cache_state = shared : UPGRADE;
                cpu3.cache_state = modified : STAY;
                TRUE : bus_action;
                    esac;
            TRUE : bus_action;
                esac;
        TRUE : bus_action;
            esac;


-- there's no state that all three caches are in modified state.
-- there's no state that two caches are in modified state and one cache is in shared state.
-- there's no state that one cache is in modified state and two caches are in shared state.
SPEC AG ! (cpu1.cache_state = modified & cpu2.cache_state = modified & cpu3.cache_state = modified);
SPEC AG ! (cpu1.cache_state = modified & (cpu2.cache_state = shared | cpu3.cache_state = shared));
SPEC AG ! (cpu2.cache_state = modified & (cpu1.cache_state = shared | cpu3.cache_state = shared));
SPEC AG ! (cpu3.cache_state = modified & (cpu1.cache_state = shared | cpu2.cache_state = shared));
SPEC AG ! (cpu1.cache_state = modified & cpu2.cache_state = shared & cpu3.cache_state = shared);
SPEC AG ! (cpu2.cache_state = modified & cpu1.cache_state = shared & cpu3.cache_state = shared);
SPEC AG ! (cpu3.cache_state = modified & cpu1.cache_state = shared & cpu2.cache_state = shared);

-- can guarantee that 
SPEC AF (cpu1.cpu_action = load -> cpu1.cache_state = shared);
SPEC AF (cpu1.cpu_action = store -> cpu1.cache_state = modified);
SPEC AF (cpu2.cpu_action = load -> cpu2.cache_state = shared);
SPEC AF (cpu2.cpu_action = store -> cpu2.cache_state = modified);
SPEC AF (cpu3.cpu_action = load -> cpu3.cache_state = shared);
SPEC AF (cpu3.cpu_action = store -> cpu3.cache_state = modified);

SPEC AF (cpu1.saved_state = load -> cpu1.cpu_action = load);
SPEC AF (cpu1.saved_state = store -> cpu1.cpu_action = store);
SPEC AF (cpu2.saved_state = load -> cpu2.cpu_action = load);
SPEC AF (cpu2.saved_state = store -> cpu2.cpu_action = store);
SPEC AF (cpu3.saved_state = load -> cpu3.cpu_action = load);
SPEC AF (cpu3.saved_state = store -> cpu3.cpu_action = store);

SPEC AF (cpu1.cpu_action = locked -> (cpu1.cpu_action = load | cpu1.cpu_action = store | cpu1.cpu_action = idle));
SPEC AF (cpu2.cpu_action = locked -> (cpu2.cpu_action = load | cpu2.cpu_action = store | cpu2.cpu_action = idle));
SPEC AF (cpu3.cpu_action = locked -> (cpu3.cpu_action = load | cpu3.cpu_action = store | cpu3.cpu_action = idle));

SPEC AF (cpu1.cpu_action = pending -> (cpu1.cpu_action = load | cpu1.cpu_action = store | cpu1.cpu_action = idle));
SPEC AF (cpu2.cpu_action = pending -> (cpu2.cpu_action = load | cpu2.cpu_action = store | cpu2.cpu_action = idle));
SPEC AF (cpu3.cpu_action = pending -> (cpu3.cpu_action = load | cpu3.cpu_action = store | cpu3.cpu_action = idle));

SPEC EF ((cpu1.cpu_action = store & cpu2.cpu_action = store) -> cpu1.cache_state = modified);
SPEC EF ((cpu1.cpu_action = store & cpu2.cpu_action = store) -> cpu2.cache_state = modified);

SPEC EF ((cpu2.cpu_action = store & cpu3.cpu_action = store) -> cpu2.cache_state = modified);
SPEC EF ((cpu2.cpu_action = store & cpu3.cpu_action = store) -> cpu3.cache_state = modified);

SPEC EF ((cpu1.cpu_action = store & cpu3.cpu_action = store) -> cpu1.cache_state = modified);
SPEC EF ((cpu1.cpu_action = store & cpu3.cpu_action = store) -> cpu3.cache_state = modified);

SPEC EF ((cpu1.cpu_action = store & cpu2.cpu_action = store & cpu3.cpu_action = store) -> cpu1.cache_state = modified);
SPEC EF ((cpu1.cpu_action = store & cpu2.cpu_action = store & cpu3.cpu_action = store) -> cpu2.cache_state = modified);
SPEC EF ((cpu1.cpu_action = store & cpu2.cpu_action = store & cpu3.cpu_action = store) -> cpu3.cache_state = modified);

SPEC EF ! ((cpu1.cpu_action = load & cpu2.cpu_action = store & cpu3.cpu_action = store) -> cpu1.cache_state = modified);
SPEC EF ! ((cpu1.cpu_action = store & cpu2.cpu_action = load & cpu3.cpu_action = store) -> cpu2.cache_state = modified);
SPEC EF ! ((cpu1.cpu_action = store & cpu2.cpu_action = store & cpu3.cpu_action = load) -> cpu3.cache_state = modified);
